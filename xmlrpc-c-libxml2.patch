--- xmlrpc-c-1.43.08/src/xmlrpc_libxml2.c.orig	2016-11-17 04:06:10.000000000 +0100
+++ xmlrpc-c-1.43.08/src/xmlrpc_libxml2.c	2024-10-27 09:43:13.526853095 +0100
@@ -47,10 +47,10 @@
 #include "xmlparser.h"
 
 struct _xml_element {
-    xml_element * parentP;
+    struct _xml_element * parentP;
     const char * name;
-    xmlrpc_mem_block cdata;    /* char */
-    xmlrpc_mem_block children; /* xml_element* */
+    xmlrpc_mem_block * cdataP;    /* char */
+    xmlrpc_mem_block * childrenP; /* xml_element* */
 };
 
 #define XMLRPC_ASSERT_ELEM_OK(elem) \
@@ -97,81 +97,78 @@ xmlElementNew(xmlrpc_env * const envP,
 -----------------------------------------------------------------------------*/
 
     xml_element * retval;
-    bool nameIsValid;
-    bool cdataIsValid;
-    bool childrenAreValid;
+    int name_valid, cdata_valid, children_valid;
 
     XMLRPC_ASSERT_ENV_OK(envP);
-    assert(name != NULL);
+    XMLRPC_ASSERT(name != NULL);
 
     /* Set up our error-handling preconditions. */
     retval = NULL;
-    nameIsValid = cdataIsValid = childrenAreValid = false;
+    name_valid = cdata_valid = children_valid = 0;
 
-    MALLOCVAR(retval);
+    /* Allocate our xml_element structure. */
+    retval = (xml_element*) malloc(sizeof(xml_element));
     XMLRPC_FAIL_IF_NULL(retval, envP, XMLRPC_INTERNAL_ERROR,
                         "Couldn't allocate memory for XML element");
 
+    /* Set our parent field to NULL. */
     retval->parentP = NULL;
-    
+
     /* Copy over the element name. */
-    retval->name = strdup(name);
+    retval->name = xmlrpc_strdupnull(name);
     XMLRPC_FAIL_IF_NULL(retval->name, envP, XMLRPC_INTERNAL_ERROR,
                         "Couldn't allocate memory for XML element");
-    nameIsValid = true;
+    name_valid = 1;
 
-    /* Initialize a block to hold our CDATA. */
-    XMLRPC_TYPED_MEM_BLOCK_INIT(char, envP, &retval->cdata, 0);
+    retval->cdataP = XMLRPC_MEMBLOCK_NEW(char, envP, 0);
     XMLRPC_FAIL_IF_FAULT(envP);
-    cdataIsValid = true;
+    cdata_valid = 1;
 
-    /* Initialize a block to hold our child elements. */
-    XMLRPC_TYPED_MEM_BLOCK_INIT(xml_element *, envP, &retval->children, 0);
+    retval->childrenP = XMLRPC_MEMBLOCK_NEW(xml_element *, envP, 0);
     XMLRPC_FAIL_IF_FAULT(envP);
-    childrenAreValid = true;
+    children_valid = 1;
 
-cleanup:
+ cleanup:
     if (envP->fault_occurred) {
         if (retval) {
-            if (nameIsValid)
+            if (name_valid)
                 xmlrpc_strfree(retval->name);
-            if (cdataIsValid)
-                xmlrpc_mem_block_clean(&retval->cdata);
-            if (childrenAreValid)
-                xmlrpc_mem_block_clean(&retval->children);
+            if (cdata_valid)
+                XMLRPC_MEMBLOCK_FREE(char, retval->cdataP);
+            if (children_valid)
+                XMLRPC_MEMBLOCK_FREE(xml_element *, retval->childrenP);
             free(retval);
         }
-        retval = NULL;
+        return NULL;
+    } else {
+        return retval;
     }
-    return retval;
 }
 
 
 
 void
 xml_element_free(xml_element * const elemP) {
-/*----------------------------------------------------------------------------
-  Blow away an existing element & all of its child elements.
------------------------------------------------------------------------------*/
-    xmlrpc_mem_block * children;
-    unsigned int size;
-    unsigned int i;
+
+    xmlrpc_mem_block * childrenP;
+    size_t size, i;
     xml_element ** contents;
 
     XMLRPC_ASSERT_ELEM_OK(elemP);
 
     xmlrpc_strfree(elemP->name);
     elemP->name = XMLRPC_BAD_POINTER;
-    xmlrpc_mem_block_clean(&elemP->cdata);
+
+    XMLRPC_MEMBLOCK_FREE(char, elemP->cdataP);
 
     /* Deallocate all of our children recursively. */
-    children = &elemP->children;
-    contents = XMLRPC_TYPED_MEM_BLOCK_CONTENTS(xml_element *, children);
-    size = XMLRPC_TYPED_MEM_BLOCK_SIZE(xml_element *, children);
+    childrenP = elemP->childrenP;
+    contents = XMLRPC_MEMBLOCK_CONTENTS(xml_element *, childrenP);
+    size = XMLRPC_MEMBLOCK_SIZE(xml_element *, childrenP);
     for (i = 0; i < size; ++i)
         xml_element_free(contents[i]);
 
-    xmlrpc_mem_block_clean(&elemP->children);
+    XMLRPC_MEMBLOCK_FREE(xml_element *, elemP->childrenP);
 
     free(elemP);
 }
@@ -198,7 +195,8 @@ xml_element_cdata_size(const xml_element
        has been called!
     */
     XMLRPC_ASSERT_ELEM_OK(elemP);
-    return XMLRPC_TYPED_MEM_BLOCK_SIZE(char, &elemP->cdata) - 1;
+
+    return XMLRPC_MEMBLOCK_SIZE(char, elemP->cdataP) - 1;
 }
 
 
@@ -206,7 +204,8 @@ xml_element_cdata_size(const xml_element
 const char *
 xml_element_cdata(const xml_element * const elemP) {
     XMLRPC_ASSERT_ELEM_OK(elemP);
-    return XMLRPC_TYPED_MEM_BLOCK_CONTENTS(char, &elemP->cdata);
+
+    return XMLRPC_TYPED_MEM_BLOCK_CONTENTS(const char, elemP->cdataP);
 }
 
 
@@ -214,7 +213,8 @@ xml_element_cdata(const xml_element * co
 unsigned int
 xml_element_children_size(const xml_element * const elemP) {
     XMLRPC_ASSERT_ELEM_OK(elemP);
-    return XMLRPC_TYPED_MEM_BLOCK_SIZE(xml_element *, &elemP->children);
+
+    return XMLRPC_MEMBLOCK_SIZE(xml_element *, elemP->childrenP);
 }
 
 
@@ -222,7 +222,7 @@ xml_element_children_size(const xml_elem
 xml_element **
 xml_element_children(const xml_element * const elemP) {
     XMLRPC_ASSERT_ELEM_OK(elemP);
-    return XMLRPC_TYPED_MEM_BLOCK_CONTENTS(xml_element *, &elemP->children);
+    return XMLRPC_MEMBLOCK_CONTENTS(xml_element *, elemP->childrenP);
 }
 
 
@@ -239,9 +239,9 @@ xmlElementAppendCdata(xmlrpc_env *  cons
 				      size_t        const size) {
 
     XMLRPC_ASSERT_ENV_OK(envP);
-    XMLRPC_ASSERT_ELEM_OK(elemP);    
+    XMLRPC_ASSERT_ELEM_OK(elemP);
 
-    XMLRPC_TYPED_MEM_BLOCK_APPEND(char, envP, &elemP->cdata, cdata, size);
+    XMLRPC_MEMBLOCK_APPEND(char, envP, elemP->cdataP, cdata, size);
 }
 
 
@@ -259,10 +259,9 @@ xmlElementAppendChild(xmlrpc_env *  cons
     XMLRPC_ASSERT_ENV_OK(envP);
     XMLRPC_ASSERT_ELEM_OK(elemP);
     XMLRPC_ASSERT_ELEM_OK(childP);
-    assert(childP->parentP == NULL);
+    XMLRPC_ASSERT(childP->parentP == NULL);
 
-    XMLRPC_TYPED_MEM_BLOCK_APPEND(xml_element *, envP, &elemP->children,
-                                  &childP, 1);
+    XMLRPC_MEMBLOCK_APPEND(xml_element *, envP, elemP->childrenP, &childP, 1);
     if (!envP->fault_occurred)
         childP->parentP = elemP;
     else
@@ -428,7 +427,7 @@ static xmlSAXHandler const saxHandler =
 
 
 static void
-removeDocSizeLimit(xmlParserCtx * const parserP ATTR_UNUSED) {
+removeDocSizeLimit(xmlParserCtxt * const parserP ATTR_UNUSED) {
 /*----------------------------------------------------------------------------
    Set up *parserP to accept a document of any size.
 
@@ -453,11 +452,11 @@ removeDocSizeLimit(xmlParserCtx * const
 static void
 createParser(xmlrpc_env *    const envP,
              ParseContext *  const contextP,
-             xmlParserCtx ** const parserPP) {
+             xmlParserCtxt ** const parserPP) {
 /*----------------------------------------------------------------------------
    Create an appropriate Libxml2 parser for our purpose.
 -----------------------------------------------------------------------------*/
-    xmlParserCtx * parserP;
+    xmlParserCtxt * parserP;
 
     parserP = xmlCreatePushParserCtxt((xmlSAXHandler *)&saxHandler, contextP,
                                         NULL, 0, NULL);
