diff -ur xmlrpc-c-1.03.10/include/xmlrpc-c/server.h xmlrpc-c-1.03.10-disp/include/xmlrpc-c/server.h
--- xmlrpc-c-1.03.10/include/xmlrpc-c/server.h	2005-04-19 00:24:55.000000000 +0200
+++ xmlrpc-c-1.03.10-disp/include/xmlrpc-c/server.h	2006-01-11 17:18:15.200164750 +0100
@@ -127,7 +127,22 @@
                              const char *      const xml_data,
                              size_t            const xml_len);
 
-/* Define a default method for the specified registry.  This will be invoked
+/* Dispatches the call specified by method_name with parameters in the
+** param_array argument.  This is useful if you want to make calls in
+** your registry without incurring the penalty inherent in XML serialization
+** and deserialization.
+** The resultPP points to the result of the method call; faults will be set in
+** the provided xmlrpc_env.
+** The caller is responsible for cleaning up the return value in non-fault
+** cases. */
+void
+xmlrpc_registry_dispatch_call(xmlrpc_env *      const envP, 
+              xmlrpc_registry * const registryP,
+              const char *      const methodName, 
+              xmlrpc_value *    const paramArrayP,
+              xmlrpc_value **   const resultPP);
+
+	/* Define a default method for the specified registry.  This will be invoked
 ** if no other method matches.  The user_data pointer is property of the
 ** application, and will not be freed or manipulated by the registry. */
 void
Only in xmlrpc-c-1.03.10-disp/include/xmlrpc-c: server.h~
diff -ur xmlrpc-c-1.03.10/src/xmlrpc_registry.c xmlrpc-c-1.03.10-disp/src/xmlrpc_registry.c
--- xmlrpc-c-1.03.10/src/xmlrpc_registry.c	2005-04-19 00:25:00.000000000 +0200
+++ xmlrpc-c-1.03.10-disp/src/xmlrpc_registry.c	2006-01-11 17:18:38.665631250 +0100
@@ -257,13 +257,6 @@
 
 
 
-/*=========================================================================
-**  dispatch_call
-**=========================================================================
-**  An internal method which actually does the dispatch. This may get
-**  prettified and exported at some point in the future.
-*/
-
 static void
 callPreinvokeMethodIfAny(xmlrpc_env *      const envP,
                          xmlrpc_registry * const registryP,
@@ -320,9 +313,15 @@
 }
 
 
+/*=========================================================================
+**  xmlrpc_registry_dispatch_call
+**=========================================================================
+**  See xmlrpc-c/server.h for more information.
+*/
 
-static void
-dispatch_call(xmlrpc_env *      const envP, 
+
+void
+xmlrpc_registry_dispatch_call(xmlrpc_env *      const envP, 
               xmlrpc_registry * const registryP,
               const char *      const methodName, 
               xmlrpc_value *    const paramArrayP,
@@ -395,7 +394,7 @@
         if (!fault.fault_occurred) {
             xmlrpc_value * result;
             
-            dispatch_call(&fault, registryP, methodName, paramArray, &result);
+            xmlrpc_registry_dispatch_call(&fault, registryP, methodName, paramArray, &result);
 
             if (!fault.fault_occurred) {
                 xmlrpc_serialize_response(envP, output, result);
@@ -466,7 +465,7 @@
                     "Recursive system.multicall strictly forbidden");
     
     /* Perform the call. */
-    dispatch_call(env, registry, method_name, param_array, &result_val);
+    xmlrpc_registry_dispatch_call(env, registry, method_name, param_array, &result_val);
     XMLRPC_FAIL_IF_FAULT(env);
     
     /* Build our one-item result array. */
Only in xmlrpc-c-1.03.10-disp/src: xmlrpc_registry.c~
