--- xmlrpc-c-0.9.10/src/xmlrpc.h	2001-06-27 12:35:01.000000000 -0400
+++ xmlrpc-c-0.9.10/src/xmlrpc.h.joe	2003-05-28 16:02:57.000000000 -0400
@@ -661,6 +661,20 @@
 			      char *xml_data,
 			      size_t xml_len);
 
+/* Dispatches the call specified by method_name with parameters in the
+** param_array argument.  This is useful if you want to make calls in
+** your registry without incurring the penalty inherent in XML serialization
+** and deserialization.
+** The return value is the result of the method call; faults will be set in
+** the provided xmlrpc_env.
+** The caller is responsible for cleaning up the return value in non-fault
+** cases. */
+extern xmlrpc_value *
+xmlrpc_registry_dispatch_call (xmlrpc_env *env,
+			       xmlrpc_registry *registry,
+			       char *method_name,
+			       xmlrpc_value *param_array);
+
 /* Define a default method for the specified registry.  This will be invoked
 ** if no other method matches.  The user_data pointer is property of the
 ** application, and will not be freed or manipulated by the registry. */
--- xmlrpc-c-0.9.10/src/xmlrpc_registry.c	2001-04-13 14:29:58.000000000 -0400
+++ xmlrpc-c-0.9.10/src/xmlrpc_registry.c.joe	2003-05-28 16:03:05.000000000 -0400
@@ -210,15 +210,16 @@
 
 
 /*=========================================================================
-**  dispatch_call
+**  xmlrpc_registry_dispatch_call
 **=========================================================================
-**  An internal method which actually does the dispatch. This may get
-**  prettified and exported at some point in the future.
+**  See xmlrpc.h for more information.
 */
 
-static xmlrpc_value *
-dispatch_call(xmlrpc_env *env, xmlrpc_registry *registry,
-	      char *method_name, xmlrpc_value *param_array)
+xmlrpc_value *
+xmlrpc_registry_dispatch_call (xmlrpc_env      *env,
+			       xmlrpc_registry *registry,
+			       char            *method_name,
+			       xmlrpc_value    *param_array)
 {
     xmlrpc_value *method_info, *result;
     void *method_ptr, *user_data;
@@ -320,7 +321,8 @@
     XMLRPC_FAIL_IF_FAULT(&fault);
 
     /* Perform the call. */
-    result = dispatch_call(&fault, registry, method_name, param_array);
+    result = xmlrpc_registry_dispatch_call(&fault, registry,
+					   method_name, param_array);
     XMLRPC_FAIL_IF_FAULT(&fault);
 
     /* Serialize the result.
@@ -397,7 +399,8 @@
 		    "Recursive system.multicall strictly forbidden");
     
     /* Perform the call. */
-    result_val = dispatch_call(env, registry, method_name, param_array);
+    result_val = xmlrpc_registry_dispatch_call(env, registry,
+					       method_name, param_array);
     XMLRPC_FAIL_IF_FAULT(env);
     
     /* Build our one-item result array. */
